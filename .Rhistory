library("swirl")
swirl()
sys.Data()
sys.Date()
Sys.Date()
mean(c(2,4,5))
source('C:/Users/Chandru/AppData/Local/Temp/RtmpcLSUM7/boring_function.R')
submit()
boring_funcation('My first function!')
boring_function('My first function!')
boring_function
source('C:/Users/Chandru/AppData/Local/Temp/RtmpcLSUM7/my_mean.R')
submit
submit()
source('C:/Users/Chandru/AppData/Local/Temp/RtmpcLSUM7/my_mean.R')
submit()
my_mean(c(4,5,10))
source('C:/Users/Chandru/AppData/Local/Temp/RtmpcLSUM7/remainder.R')
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
source('C:/Users/Chandru/AppData/Local/Temp/RtmpcLSUM7/evaluate.R')
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(funcation(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
info()
bye()
exit
quit
q
q()
intdata <- c(1:100)
install.packages('RMySQL',type='source')
install.devtools("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages('RMySQL',type='source')
library("swirl")
sirl()
swirl()
paste("Programming", "is", "fun")
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/telegram.R')
submit()
telegram("My", "First" , "Telegram")
submit()
submit("telegram.R")
submit("telegram")
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/mad_libs.R')
submit()
mad_libs(place="Indiana", adjective ="great", noun="of")
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/bin_op.R')
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/bin_op.R')
submit()
'I' %P% 'love' %p% 'R!'
%p%('%p%(I' , 'love'), 'R!')
%p%(%p%('I' , 'love'), 'R!')
%p%(%p%("I", "love"), "R!")
%p%('I', 'love')
%p%("I", "love")
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/bin_op.R')
'I' %p% 'love' %p% 'R!'
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
exit
source('C:/Users/Chandru/AppData/Local/Temp/RtmpaQqxOa/telegram.R')
library(nlme)
library(lattice)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages('lattice')
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("nlme")
install.packages("nlme")
library(nlm)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(qplot)
install.packages("qplot")
library(qplot)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth"
)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
library("swirl")
swirl
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
slapply(flags, class)
sapply(flags, class)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flas[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, lenght)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, funcation(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
bye
rm(airquality)
rm(q)
rm(p)
a < c(140,138,150,148,135)
a <- c(140,138,150,148,135)
b <- c(132),135,151,146,130)
t.test(a,b, paired=TRUE)
b <- c(132,135,151,146,130)
t.test(a,b, paired=TRUE)
mn <- c(1100)
s <- c(30)
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(9))
mu0 <- mn - z * s / sqrt(9)
mu0
z
z <- qnorm(.95)
mu0
mu0 <- mn - z * s / sqrt(9)
mu0
pbinom(q=2, size, 4, prob=0.5, lower.tail=FALSE)
pbinom(q=2, size=4, prob=0.5, lower.tail=FALSE)
poisson.test(10, T= 1787, r = 1/100), alt="less")$p.value
poisson.test(10, T = 1787, r = (1/100), alt="less")$p.value
n1 = 9 ; n2 = 9; mu1 = -3; sd1 = 1.5; mu2 = 1; sd2 = 1.8
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
11/12
deck
1/52
52
4/52
0
12/52
2/51
.64
.64
mypdf
x = .8 * 1.6
integrate(mypdf,0,1.6)
.32
2
1
1.414214
.997 * .001
(1- .997) * (1 - .001)
(1 - .98.5) * ( 1- .001)
(1 - .985) * ( 1- .001)
.000997 / (.000997 + .002997)
.000997 / (.000997 + .015 * .999)
21/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
info()
bye()
exit
swirl()
libarary(swirl)
library(swirl)
swirl()
.5 * (edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam,1, mean)
means(smeans)
mean(smeans)
exit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
skimtrain <- training[,grep("^IL",names(training))]
preP <- preProcess(skimtrain, method = "pca", thresh = 0.9)
class(preP)
dim(preP)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
preP
preP <- preProcess(skimtrain, method = "pca", thresh = 0.8)
preP
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
exit\
exit
setwd("C:/Users/Chandru/Developing Data Products")
install.packages('stringr')
install.packages("stringr")
devtools::install_github('muschellij2/slidify')
library(slidify)
slidify("index.Rmd")
publish(title = 'Developing Data Products - Shiny App', 'index.html', host = 'rpubs')
getwd()
publish(title = 'Developing Data Products - Shiny App', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'Developing Data Products - Shiny App', 'index.html', host = 'rpubs')
file.edit('`/.Rprofile')
file.edit('~/.Rprofile')
